@model SpecWheels.Models.User.UserModel

@{
    ViewBag.Title = "Register";
}

@using (Html.BeginForm("Register", "User", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    
    <script>
        $(document).ready(function () {
            $('.input-validation-error').parents('.form-group').addClass('has-error');
            $('.input-validation-error').addClass('form-control');
            $('.field-validation-error').addClass('text-danger');

            $('.validation-summary-errors').each(function () {
                $(this).addClass('alert');
                $(this).addClass('alert-danger');
            });

        });

        //$(function () {
        //    // any validation summary items should be encapsulated by a class alert and alert-danger
        //    $('.validation-summary-errors').each(function () {
        //        $(this).addClass('alert');
        //        $(this).addClass('alert-danger');
        //    });

            // update validation fields on submission of form
            //$('form').submit(function () {
        //    $(document).ready(function () {



        //        if ($(this).find('.input-validation-error').length == 0) {
        //            alert('bundao');
        //            $(this).find('.form-group').each(function () {
        //                if ($(this).find('.field-validation-error').length == 0) {
        //                    $(this).removeClass('has-error');
        //                    $(this).addClass('has-success');
        //                }
        //            });
        //        }
        //        else {
        //            alert('bunda');
        //            $(this).find('.form-group').each(function () {
        //                if ($(this).find('.input-validation-error').length > 0) {
        //                    alert('bunda denovo1');
        //                    $(this).removeClass('has-success');
        //                    $(this).addClass('has-error');
        //                }
        //            });
        //            $(this).find('.input-validation-error').each(function () {
        //                    alert('bunda denovo2');
        //                $(this).addClass('text-danger');
        //            });
        //            $('.validation-summary-errors').each(function () {
        //                if ($(this).hasClass('alert-danger') == false) {
        //                    $(this).addClass('alert');
        //                    $(this).addClass('alert-danger');
        //                }
        //            });
        //        }
        //    });

        //    // check each form-group for errors on ready
        //    $('form').each(function () {
        //        $(this).find('div.form-group').each(function () {
        //            if ($(this).find('span.field-validation-error').length > 0) {
        //                $(this).addClass('has-error');
        //            }
        //        });
        //    });
        //});

        //var page = function () {
        //    //Update the validator
        //    $.validator.setDefaults({
        //        highlight: function (element) {
        //            $(element).closest(".form-group").addClass("has-error");
        //            $(element).closest(".form-group").removeClass("has-success");
        //        },
        //        unhighlight: function (element) {
        //            $(element).closest(".form-group").removeClass("has-error");
        //            $(element).closest(".form-group").addClass("has-success");
        //        }
        //    });
        //}();
    </script>

    <fieldset class="form-group has-error">
        @Html.AntiForgeryToken()
        <h4>Create a new account</h4>
        <hr />
        @Html.ValidationSummary()

        <div class="form-group has-error">
            @Html.LabelFor(a => a.FirstName, new { @class = "form-control-label" })
            @Html.TextBoxFor(a => a.FirstName, new { @class = "form-control" })
            @{ Html.ValidateFor(a => a.FirstName); }
            @Html.ValidationMessageFor(x => x.FirstName)
        </div>

        <div class="form-group">
            @Html.LabelFor(a => a.LastName, new { @class = "form-control-label" })
            @Html.TextBoxFor(a => a.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.LastName)
        </div>

        <div class="form-group">
            @Html.LabelFor(a => a.Nickname, new { @class = "form-control-label" })
            @Html.TextBoxFor(a => a.Nickname, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Nickname)
        </div>

        <div class="form-group">
            @Html.LabelFor(a => a.Email, new { @class = "form-control-label" })
            @Html.TextBoxFor(a => a.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Email)
        </div>

        <div class="form-group has-success">
            @Html.LabelFor(a => a.Password, new { @class = "form-control-label" })
            @Html.TextBoxFor(a => a.Password, new { @class = "form-control" })
            <div class="has-error">@Html.ValidationMessageFor(x => x.Password)</div>
        </div>

        <div id="messages"></div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Register" />
            </div>
        </div>

    </fieldset>
}